function postData(data, label){
    let xhr = new XMLHttpRequest();
    xhr.open("POST", '/lingenia', true);
    xhr.setRequestHeader('Content-Type', 'application/json');
    var jsonObj = {}
    for (i = 0; i < label.length; i++){
    jsonObj[label[i]] = data[i]
    }
    xhr.send(JSON.stringify(jsonObj));
}

function printDataFromFile(data, labels){
    // Display data from submitted file. 

    eraseAllHighlighting()
    // Erase existing highlighted text.
    var uploadedFile = document.getElementById("upload");   
    var file = uploadedFile.files[0];
    var fileReader = new FileReader();

    let xhr = new XMLHttpRequest();
    xhr.open("POST", '/lingenia', true);
    xhr.setRequestHeader('Content-Type', 'application/json');

    var jsonObj = {}
    fileReader.onload = function(e){
        // Run when file reader has loaded. 
        var uploadedText = e.target.result

        console.log(uploadedText)
        jsonObj['from_file'] = uploadedText
        xhr.send(JSON.stringify(jsonObj));
        };

    var test = fileReader.readAsText(file, "UTF-8");

    xhr.onload = function () {
        // Run when xhr response recieved from python code. 
        var outputJson = xhr.responseText;
        
        // Test for valid input:
        try{
        // Highlight letters
        highlightLetters(outputJson, "vowel_json")
        highlightLetters(outputJson, "consonant_json")
        } catch(err){
            alert('Incorrect file format detected. Please try again.')
        }
    };
};

function sendHighlightedForWords(data, labels){
    // Get only currently highlighted data and send it back to the server for word generation. 

    var numberData = document.getElementById(data[0]).valueAsNumber
    // Get number of words to generate. 
    isNumberWordError = errorNumber(numberData, "word_no_entry")
    data[0] = numberData
    // Replace first element of the data array with the number of words to generate. 
    var buttons = document.querySelectorAll("button");
    var exists = getHighlighted(buttons);
    labels = labels.concat(['v_list', 'c_list']);
    data = data.concat(exists);
    // Get generated phonemes.

    if (exists[0].length==0){
        errorContainer = document.getElementById("word_no_entry")
        cleanErrorContainer(errorContainer)
        // Get error element and remove existing messages.
        
        errorElement = document.createElement("p")
        message = document.createTextNode("Cannot generate words; no phonemes have been selected.")
        errorElement.appendChild(message)
        errorContainer.appendChild(errorElement)
        errorContainer.style.color = "red";
    };
    // Check that phonemes have been generated, otherwise, display error message.

    if ((isNumberWordError==false) && (exists[0].length>0)) {
        // Check for valid number of words and highlighted phonemes.

        let xhr = new XMLHttpRequest();
        xhr.open("POST", '/lingenia', true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        var jsonObj = {}
        for (i = 0; i < labels.length; i++){
            jsonObj[labels[i]] = data[i]
        };
        
        xhr.send(JSON.stringify(jsonObj));
        xhr.onload = function () {
            var wordsJson = xhr.responseText;
            var words = JSON.parse(wordsJson);
            for (j = 0; j < words['generated_words'].length; j++){
                var newP = document.createElement("p");
                newP.innerHTML = words['generated_words'][j];
                // InnerHTML ok due to words being generated by the python program and not user input.
                // InnerHTML also necessary, required to decode special characters.
                document.getElementById("new-words").appendChild(newP);
            };
        };
    };
}

function sendHighlightedForSaving(data, labels){
    // Get only currently highlighted data and send it back to the server, 
    // along with the generated words, for saving. 

    // Highlighted data.
    var buttons = document.querySelectorAll("button");
    var exists = getHighlighted(buttons);
    labels = labels.concat(['v_list', 'c_list']);
    data = data.concat(exists);
    // Generated words. 
    var words_list = []
    var words = document.getElementById("new-words").children
    for (j=0; j < words.length; j++){
        words_list = words_list.concat(words[j].innerHTML)
    };
    data.push(words_list)
    labels = labels.concat(["gen_words"])

    let xhr = new XMLHttpRequest();
    xhr.open("POST", '/lingenia', true);
    xhr.setRequestHeader('Content-Type', 'application/json');
    var jsonObj = {}
    for (i = 0; i < labels.length; i++){
        jsonObj[labels[i]] = data[i]
    };
    
    xhr.send(JSON.stringify(jsonObj));
    xhr.onload = function () {
        console.log(xhr.getResponseHeader('Content-Disposition'))
        window.open("/return-files/", '_blank');
    };
    
};

function eraseAllHighlighting(){
    // Cycle through all elements of the verb and consonant tables. 
    // If highlighted already, change text colour back to default.
    var buttons = document.querySelectorAll("button");
    for (i = 0; i < buttons.length; i++) {
        var node = buttons[i];
        if (node.style.color == "red") {
            node.style.color = "black";
        };
    };
}

function highlightLetters(jsonName, selectName){
    // Change the selected letter colour to red. Takes the json with the
    // vowels and consonants as input and  
    var j = JSON.parse(jsonName);
    var jList = j[selectName].split(",");
    console.log(jList)
    var i;
    for (i = 0; i < jList.length; i++) {
        console.log(jList[i])
        document.getElementById(jList[i]).style.color = "red";
    };
};

function cleanErrorContainer(errorContainer) {
    // Check the error container is empty so it isn't filled with multiple messages.

    if (errorContainer.childElementCount > 0){
        // Remove all error container elements. 
        while (errorContainer.childElementCount > 0){
            errorContainer.removeChild(errorContainer.lastChild)
        };
    };
};

function errorNumber(testCharacter, errorId, checkRange=false){

    errorContainer = document.getElementById(errorId)
    // Get error container HTML element.

    cleanErrorContainer(errorContainer)

    errorElement = document.createElement("p")
    isError = false

    if (isNaN(testCharacter)){
         // Check for non number entries. 
        message = document.createTextNode("Entry must be a number")
        errorElement.appendChild(message)
        errorContainer.appendChild(errorElement)
        errorContainer.style.color = "red";
        isError = true
    };
   
    if (checkRange==true) {
        // Check that supplied number is in range. 
        if ((testCharacter < 3) || (testCharacter > 50)){
            errorElement.appendChild(document.createTextNode("Number must be between 3 and 50"))
            errorContainer.appendChild(errorElement)
            errorContainer.style.color = "red";
            isError = true
        };
    };

    return isError
};

function postInputs(vowelInputId, consonantInputId){
    var vowelData = document.getElementById(vowelInputId).valueAsNumber
    var consonantData = document.getElementById(consonantInputId).valueAsNumber
    // Get content and vowel numbers of the input box.
    
    isVowelError = errorNumber(vowelData, "vowel_entry", checkRange=true)
    isConsonantError = errorNumber(consonantData, "consonant_entry", checkRange=true)

    // Check for invalid values.
    var dataList = [vowelData, consonantData]

    eraseAllHighlighting()
    // Erase existing highlighted text.

    if ((isVowelError==false) && (isConsonantError==false)) {

        let xhr = new XMLHttpRequest();
        xhr.open("POST", '/lingenia', false);
        xhr.setRequestHeader('Content-Type', 'application/json');
        var jsonObj = {};
        jsonObj["vowels_and_consonants"] = dataList;

        xhr.onload = function () {
            var outputJson = xhr.responseText;
            highlightLetters(outputJson, "vowel_json")
            highlightLetters(outputJson, "consonant_json")
        };
        xhr.send(JSON.stringify(jsonObj));
    };

};

// Play pronunciations on click. 
function playAudio(ele) { 
    var x = ele.getElementsByTagName("audio")[0];
    x.play(); 
} 

// Check if a letter is highlighted
function getHighlighted(nodesList) {
    var vlist = [];
    var clist = [];
    var allData =[vlist, clist];
    var i;
    for (i = 0; i < nodesList.length; i++) {
        var node = nodesList[i];
        if (node.style.color == "red") {
            allData = addToList(allData[0], allData[1], node.id);
        };
    };
    return allData
};

// Determine whether to add to the vowel or consonant JSON:
function addToList(vlist, clist, id) {                     
    var vowelRows = document.getElementsByTagName("table")[0];
    // First table, on vowels.
    var vowelElement = vowelRows.getElementsByTagName("button").namedItem(id);

    if (vowelElement !== null) {
            // If id of current element is in the vowels grid, then it is a vowel. 
            vlist.push(id);
        }

    var consonantRows = document.getElementsByTagName("table")[1];
    // Second table, on consonants.
    var consonantElement = consonantRows.getElementsByTagName("button").namedItem(id);

    if (consonantElement !== null) {
            // If id of current element is in the consonant grid, then it is a consonant. 
            clist.push(id);
    };
    return [vlist, clist]
};

// Run when button in the grid is double clicked. Add or subtract
// from the list of existing selected letters. 
function addOrRemove(ele) {
    
    var buttons = document.querySelectorAll("button");
    var exists = getHighlighted(buttons);
    var vlist = exists[0];
    var clist = exists[1];

    var id = ele.id;
    var selectedTextColour = document.getElementById(id).style.color;

    if (selectedTextColour == "red") {
        // If highlighted already, change text colour back to default and 
        // remove from the JSON.
        document.getElementById(id).style.color = "black";

        if (exists){
            // Remove element from list of all phonemes if highlighting is removed.
            var c_id = clist.indexOf(id);
            var v_id = vlist.indexOf(id);
            
            if (c_id >= 0){
                removed = clist.splice(c_id, 1);
            }
            else if (v_id >=0){
                removed = vlist.splice(v_id, 1);
            }
        }
    }
    else if (selectedTextColour == "black" || selectedTextColour==="") {
        // If not yet highlighted, then change text colour to red and add to JSON (if it exists).
        document.getElementById(id).style.color = "red";
        if (exists){
            exists = addToList(vlist, clist, id)
            vlist = exists[0];
            clist = exists[1];
            };
        };

    // POST
    console.log('send')
    postData([vlist, clist], ["v_list", "c_list"])

 };